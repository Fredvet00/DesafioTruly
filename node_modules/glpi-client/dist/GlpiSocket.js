"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const GlpiResponseException_1 = require("./GlpiResponseException");
class GlpiSocket {
    constructor(url, headers = {}) {
        this.url = url.replace(/\/$/, '') + '/';
        this.setHeader(headers);
    }
    getHttp() {
        return this.http;
    }
    setHeader(headers = {}) {
        this.http = this.makeHttpSocket(this.url, headers);
    }
    call(method, path, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.http.request(Object.assign({
                    url: path,
                    method: method.toLowerCase(),
                }, options));
            }
            catch (error) {
                throw new GlpiResponseException_1.GlpiResponseException(error);
            }
        });
    }
    makeHttpSocket(url, extraHeaders = {}) {
        const http = axios_1.default.create({
            baseURL: url,
            headers: Object.assign({
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            }, extraHeaders),
            timeout: 40000,
            retries: 0,
        });
        http.interceptors.response.use(null, error => {
            if (error.code === 'ECONNABORTED' && error.config && error.config.retries < 3) {
                error.config.retries++;
                return http.request(error.config);
            }
            return Promise.reject(error);
        });
        return http;
    }
}
exports.GlpiSocket = GlpiSocket;
