import { GlpiSocket } from './GlpiSocket';
import { AxiosResponse, AxiosInstance } from 'axios';
import { IGetItemParams } from './interfaces/IGetItemParams';
import { IGetItemsParams } from './interfaces/IGetItemsParams';
import { IGetMultipleItemsParams } from './interfaces/IGetMultipleItemsParams';
import { ISearchParams } from './interfaces/ISearchParams';
import { IDeleteItemParams } from './interfaces/IDeleteItemParams';
export declare class GlpiAPI {
    private socket;
    private reloginInterceptor;
    constructor(socket: GlpiSocket);
    getHttpSocket(): AxiosInstance;
    getSocket(): GlpiSocket;
    setSocket(socket: GlpiSocket): void;
    setReloginInterceptor(interceptor: number): void;
    killSession<T>(): Promise<AxiosResponse<T>>;
    lostPassword<T>(email: string, passwordForgetToken?: string, password?: string): Promise<AxiosResponse<T>>;
    getMyProfiles<T>(): Promise<AxiosResponse<T>>;
    getActiveProfile<T>(): Promise<AxiosResponse<T>>;
    changeActiveProfile<T>(profiles_id: number): Promise<AxiosResponse<T>>;
    getMyEntities<T>(is_recursive?: boolean): Promise<AxiosResponse<T>>;
    getActiveEntities<T>(): Promise<AxiosResponse<T>>;
    changeActiveEntities<T>(entities_id?: string | number, is_recursive?: boolean): Promise<AxiosResponse<T>>;
    getFullSession<T>(): Promise<AxiosResponse<T>>;
    getGlpiConfig<T>(): Promise<AxiosResponse<T>>;
    getItem<T>(item_type: string, id: number, options?: IGetItemParams): Promise<AxiosResponse<T>>;
    getItems<T>(item_type: string, options?: IGetItemsParams): Promise<AxiosResponse<T>>;
    getSubitems<T>(item_type: string, id: number, subitem_type: string, options?: IGetItemsParams): Promise<AxiosResponse<T>>;
    getMultipleItems<T>(options: IGetMultipleItemsParams): Promise<AxiosResponse<T>>;
    listSearchOptions<T>(item_type: string, raw?: boolean): Promise<AxiosResponse<T>>;
    search<T>(item_type: string, options?: ISearchParams): Promise<AxiosResponse<T>>;
    addItem<T>(item_type: string, input?: any): Promise<AxiosResponse<T>>;
    updateItem<T>(item_type: string, id: number, input?: any): Promise<AxiosResponse<T>>;
    deleteItem<T>(item_type: string, id: number | number[], options?: IDeleteItemParams): Promise<AxiosResponse<T>>;
    private serializeArrayForGetMethod;
    private serializeObjectForGetMethod;
}
